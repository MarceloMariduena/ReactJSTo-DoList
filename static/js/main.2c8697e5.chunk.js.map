{"version":3,"sources":["logo.svg","components/Header.js","components/Form.js","components/Task.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","title","Form","onSubmit","addTask","type","name","onChange","input","value","placeholder","error","Task","task","onClick","remove","Footer","href","link","target","author","App","state","newTask","myTasks","e","_this","setState","addnewTask","preventDefault","preState","push","removeTask","index","concat","Object","toConsumableArray","slice","_this2","this","src","logo","alt","src_components_Header","src_components_Form","map","t","src_components_Task","key","src_components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gUCYzBC,eATA,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCACZJ,EAAMK,UCYJC,SAhBF,SAACN,GAAD,OAETC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOG,SAAUP,EAAMQ,SACnCP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,QACpBC,SAAUX,EAAMY,MAChBC,MAAOb,EAAMa,MACbC,YAAad,EAAMc,YACnBV,UAAWJ,EAAMe,MAAQ,2BAA6B,iBAE1Dd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAf,iBACAH,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,kCAAhC,WCAGY,SAXF,SAAChB,GACV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UACGH,EAAMiB,KACPhB,EAAAC,EAAAC,cAAA,UAAQe,QAASlB,EAAMmB,OAAQf,UAAU,qCAAzC,WCCKgB,SANA,SAACpB,GAAD,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,KAAGkB,KAAMrB,EAAMsB,KAAMC,OAAO,UAAUvB,EAAMwB,YC+DjDC,6MA1DbC,MAAQ,CACNC,QAAS,GACTC,QAAS,GACTb,MAAO,MAITY,QAAU,SAACE,GACTC,EAAKC,SAAS,CACZJ,QAASE,EAAEN,OAAOV,MAClBE,MAAO,QAIXiB,WAAa,SAACH,GACZA,EAAEI,iBACyB,KAAvBH,EAAKJ,MAAMC,QACbG,EAAKC,SAAS,CAAEhB,MAAO,SAEvBe,EAAKC,SAAS,SAAAG,GAAQ,OAAIA,EAASN,QAAQO,KAAKL,EAAKJ,MAAMC,WAE7DG,EAAKC,SAAS,CACZJ,QAAS,QAIbS,WAAa,SAACC,GACZP,EAAKC,SAAS,CACZH,QAAO,GAAAU,OAAAC,OAAAC,EAAA,EAAAD,CACFT,EAAKJ,MAAME,QAAQa,MAAM,EAAGJ,IAD1BE,OAAAC,EAAA,EAAAD,CAEFT,EAAKJ,MAAME,QAAQa,MAAMJ,EAAQ,gFAKjC,IAAAK,EAAAC,KACP,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKyC,IAAKC,IAAMzC,UAAU,WAAW0C,IAAI,SAEzC7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAQ1C,MAAM,UACdJ,EAAAC,EAAAC,cAAC6C,EAAD,CAAMlC,YAAY,qBAChBF,MAAO+B,KAAKhB,QACZnB,QAASmC,KAAKX,WACdnB,MAAO8B,KAAKjB,MAAMC,QAClBZ,MAAO4B,KAAKjB,MAAMX,QAEpBd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACXuC,KAAKjB,MAAME,QAAQqB,IAAI,SAACC,EAAGb,GAAJ,OACtBpC,EAAAC,EAAAC,cAACgD,EAAD,CAAMC,IAAKf,EAAOpB,KAAMiC,EAAG/B,OAAQ,kBAAMuB,EAAKN,WAAWC,SAG7DpC,EAAAC,EAAAC,cAACkD,EAAD,CAAQ7B,OAAO,oBAAoBF,KAAK,gDAtD9BgC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c8697e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => (\n    <div className=\"Header\">\n        <h1>\n            <i className=\"fas fa-tasks text-info mr-2\" />\n            {props.title}\n        </h1>\n    </div>\n);\n\nexport default Header;","import React from 'react';\nimport './Form.css';\n\nconst Form = (props) => (\n    /* Bootstrap was used bellow */\n    <form className=\"Form\" onSubmit={props.addTask}>\n        <div>\n            <input type=\"text\" name=\"input\" \n                onChange={props.input} \n                value={props.value} \n                placeholder={props.placeholder} \n                className={props.error ? \"form-control is-invalid \" : \"form-control\"}\n            />\n            <div className=\"invalid-feedback bg-dark p-2\">Task required</div>\n            <button type=\"submit\" className=\"btn btn-success btn-block mt-2\">Add</button>\n        </div>\n    </form>\n);\n\nexport default Form;","import React from 'react';\nimport './Task.css';\n\nconst Task = (props) => {\n    return (\n      <div className=\"Tasks\">\n        <li>\n          {props.task}\n          <button onClick={props.remove} className=\"btn btn-sm btn-danger float-right\"> x </button>\n        </li>\n      </div>\n    );\n  };\n\nexport default Task;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = (props) => (\n    <div className=\"Footer\">\n        <p>Coded by <a href={props.link} target=\"_black\">{props.author}</a></p>\n    </div>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Task from './components/Task';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  // Default state \n  state = {\n    newTask: \"\",\n    myTasks: [],\n    error: \"\"\n  };\n\n  // This function adds a task into the App's state\n  newTask = (e) => {\n    this.setState({\n      newTask: e.target.value,\n      error: \"\"\n    });\n  };\n  \n  addnewTask = (e) => {\n    e.preventDefault();\n    if (this.state.newTask === \"\") {\n      this.setState({ error: \"true\" });\n    } else \n      this.setState(preState => preState.myTasks.push(this.state.newTask));\n    \n    this.setState({\n      newTask: \"\"\n    });\n  };\n\n  removeTask = (index) => {\n    this.setState({\n      myTasks: [\n        ...this.state.myTasks.slice(0, index),\n        ...this.state.myTasks.slice(index + 1)\n      ]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <Header title=\"To-Do\"/>\n        <Form placeholder=\"Enter task here...\"\n          input={this.newTask}\n          addTask={this.addnewTask}\n          value={this.state.newTask}\n          error={this.state.error}\n        />\n        <ul className=\"list-group mt-2\">\n          {this.state.myTasks.map((t, index) => (\n            <Task key={index} task={t} remove={() => this.removeTask(index)} />\n          ))}\n        </ul>\n        <Footer author=\"Marcelo Mariduena\" link=\"https://github.com/marcelomariduena\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}